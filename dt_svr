#!/bin/bash

if [[ $(id -u) != 0 ]]; then
	clear
    whiptail --title "错误信息" --msgbox "请在root用户下执行" 8 78 
	exit 
fi

if [[ $(uname -m 2> /dev/null) != x86_64 ]]; then
	clear
    whiptail --title "错误信息" --msgbox "请在64位系统下运行此脚本" 8 78 
	exit 1
fi

#操作系统判断
osdist(){

    set -e
    if cat /etc/*release | grep ^NAME | grep -q Debian; then

        dist=debian
        apt-get update -q
        export DEBIAN_FRONTEND=noninteractive
        apt-get install whiptail curl locales lsb-release jq dnsutils lsof -y -qq

    else
        clear
        whiptail --title "错误信息" --msgbox "本脚本只能在debian10下运行" 8 78     
        exit 1; 
    fi
}

#域名解析验证
isresolved(){
    if [ $# = 2 ]
    then
        myip=$2
    else
        myip=`curl --silent http://dynamicdns.park-your-domain.com/getip`
    fi
    ips=(`nslookup $1 1.1.1.1 | grep -v 1.1.1.1 | grep Address | cut -d " " -f 2`)
    for ip in "${ips[@]}"
    do
        if [ $ip == $myip ]
        then
            return 0
        else
            continue
        fi
    done
    return 1
}

###############更新系统list################
installDependency(){

export DEBIAN_FRONTEND=noninteractive
apt-get update --fix-missing
sh -c 'echo "y\n\ny\ny\ny\ny\ny\ny\ny\n" | DEBIAN_FRONTEND=noninteractive apt-get upgrade -q -y'

if [[ $(lsb_release -cs) == stretch ]]; then
    cat > '/etc/apt/sources.list' << EOF
#------------------------------------------------------------------------------#
#                   OFFICIAL DEBIAN REPOS                    
#------------------------------------------------------------------------------#
###### Debian Main Repos
deb http://deb.debian.org/debian/ stable main contrib non-free
deb-src http://deb.debian.org/debian/ stable main contrib non-free
deb http://deb.debian.org/debian/ stable-updates main contrib non-free
deb-src http://deb.debian.org/debian/ stable-updates main contrib non-free
deb http://deb.debian.org/debian-security stable/updates main
deb-src http://deb.debian.org/debian-security stable/updates main
deb http://ftp.debian.org/debian buster-backports main
deb-src http://ftp.debian.org/debian buster-backports main
EOF
apt-get update --fix-missing
sh -c 'echo "y\n\ny\ny\ny\ny\ny\ny\ny\n" | DEBIAN_FRONTEND=noninteractive apt-get upgrade -q -y'
sh -c 'echo "y\n\ny\ny\ny\ny\ny\ny\ny\n" | DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -q -y'
sh -c 'echo "y\n\ny\ny\ny\ny\ny\ny\ny\n" | DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -q -y'
sh -c 'echo "y\n\ny\ny\ny\ny\ny\ny\ny\n" | DEBIAN_FRONTEND=noninteractive apt --fix-broken install -y'
clear
fi

if [[ $(lsb_release -cs) == jessie ]]; then
cat > '/etc/apt/sources.list' << EOF
#------------------------------------------------------------------------------#
#                   OFFICIAL DEBIAN REPOS                    
#------------------------------------------------------------------------------#
###### Debian Main Repos
deb http://deb.debian.org/debian/ oldstable main contrib non-free
deb-src http://deb.debian.org/debian/ oldstable main contrib non-free
deb http://deb.debian.org/debian/ oldstable-updates main contrib non-free
deb-src http://deb.debian.org/debian/ oldstable-updates main contrib non-free
deb http://deb.debian.org/debian-security oldstable/updates main
deb-src http://deb.debian.org/debian-security oldstable/updates main
deb http://ftp.debian.org/debian stretch-backports main
deb-src http://ftp.debian.org/debian stretch-backports main
EOF
	apt-get update --fix-missing
	sh -c 'echo "y\n\ny\ny\ny\ny\ny\ny\ny\n" | DEBIAN_FRONTEND=noninteractive apt-get upgrade -q -y'
	sh -c 'echo "y\n\ny\ny\ny\ny\ny\ny\ny\n" | DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -q -y'
	sh -c 'echo "y\n\ny\ny\ny\ny\ny\ny\ny\n" | DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -q -y'
	sh -c 'echo "y\n\ny\ny\ny\ny\ny\ny\ny\n" | DEBIAN_FRONTEND=noninteractive apt --fix-broken install -y'
	
	sh -c 'echo "y\n\ny\ny\ny\ny\ny\ny\ny\n" | DEBIAN_FRONTEND=noninteractive apt-get autoremove -qq -y'
	clear
fi

sh -c 'echo "y\n\ny\ny\ny\ny\ny\ny\ny\n" | DEBIAN_FRONTEND=noninteractive apt-get autoremove -qq -y'
#clear

apt-get upgrade

if [ -x "$(command -v curl)" ]; then
apt-get -y -qq install sudo wget gnupg python3-qrcode unzip chrony systemd dbus cron socat 
else
apt-get -y -qq install sudo curl wget gnupg python3-qrcode unzip chrony systemd dbus cron socat net-tools
fi
apt-get -y -qq install python3-qrcode
#clear

}

#输入域名+ip
userinput(){
    while [[ -z ${domain} ]]; do
        domain=$(whiptail --inputbox --nocancel "请输入域名(每个域名每周只能使用5次，安装失败也算次数，可以换不同的A记录解决）" 8 78 --title "输入域名" 3>&1 1>&2 2>&3)
    done

    # if isresolved $domain
    # then
    # :
    # else 
	#     clear
    #     whiptail --title "错误信息" --msgbox "域名解析IP不匹配VPS端IP" 8 78 
	#     exit 1
    # fi

    while [[ -z ${passwordd} ]]; do
        passwordd=$(whiptail --inputbox --nocancel "请输入密码(这个是配置trojan的密码，牢记）" 8 78 --title "输入密码" 3>&1 1>&2 2>&3)
    done

    if [[ ! -d /etc/trojan ]]; then
		mkdir /etc/trojan
	fi
}

#开始安装trojan
installtrojan(){

if [[ ! -f /usr/local/bin/trojan ]]; then

bash -c "$(wget -O- https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)"

cat > '/usr/local/etc/trojan/config.json' << EOF
{
    "run_type": "server",
    "local_addr": "0.0.0.0",
    "local_port": 443,
    "remote_addr": "127.0.0.1",
    "remote_port": 80,
    "password": [
        "$passwordd"
    ],
    "log_level": 1,
    "ssl": {
        "cert": "/etc/trojan/trojan.crt",
        "key": "/etc/trojan/trojan.key",
        "key_password": "",
        "cipher": "$cipher_server",
        "cipher_tls13": "TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384",
        "prefer_server_cipher": true,
        "alpn": [
            "http/1.1"
        ],
        "reuse_session": true,
        "session_ticket": false,
        "session_timeout": 600,
        "plain_http_response": "",
        "curves": "",
        "dhparam": ""
    },
    "tcp": {
        "prefer_ipv4": true,
        "no_delay": true,
        "keep_alive": true,
        "reuse_port": false,
        "fast_open": true,
        "fast_open_qlen": 20
    },
    "mysql": {
        "enabled": false,
        "server_addr": "127.0.0.1",
        "server_port": 3306,
        "database": "trojan",
        "username": "trojan",
        "password": ""
    }
}
EOF
	systemctl enable trojan > /dev/null 2>&1
    systemctl start trojan > /dev/null 2>&1
fi
}

openfirewall(){

set +e
	
	#tcp
	iptables -I INPUT -p tcp -m tcp --dport 443 -j ACCEPT
	iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPT
	#udp
	iptables -I INPUT -p udp -m udp --dport 443 -j ACCEPT
	iptables -I INPUT -p udp -m udp --dport 80 -j ACCEPT
	iptables -I OUTPUT -j ACCEPT
	iptables -I FORWARD -j DROP

    export DEBIAN_FRONTEND=noninteractive 
	apt-get install iptables-persistent -qq -y > /dev/null
}

#安装nginx
installnginx(){
    if [[ ! -f /etc/apt/sources.list.d/nginx.list ]]; then

curl -LO --progress-bar https://nginx.org/keys/nginx_signing.key
apt-key add nginx_signing.key
rm -rf nginx_signing.key
touch /etc/apt/sources.list.d/nginx.list
cat > '/etc/apt/sources.list.d/nginx.list' << EOF
deb https://nginx.org/packages/mainline/$dist/ $(lsb_release -cs) nginx
deb-src https://nginx.org/packages/mainline/$dist/ $(lsb_release -cs) nginx
EOF
apt-get purge nginx -qq -y
apt-get update -q
apt-get install nginx -q -y

cat > '/lib/systemd/system/nginx.service' << EOF
[Unit]
Description=The NGINX HTTP and reverse proxy server
After=syslog.target network.target remote-fs.target nss-lookup.target
[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx
ExecReload=/usr/sbin/nginx -s reload
ExecStop=/bin/kill -s QUIT \$MAINPID
PrivateTmp=true
LimitNOFILE=51200
LimitNPROC=51200
Restart=on-failure
RestartSec=3s
[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable nginx

cat > '/etc/nginx/nginx.conf' << EOF
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;
events {
	worker_connections 51200;
	use epoll;
	multi_accept on;
}
http {
	aio threads;
	charset UTF-8;
	tcp_nodelay on;
	tcp_nopush on;
	server_tokens off;
	include /etc/nginx/mime.types;
	default_type application/octet-stream;
	access_log /var/log/nginx/access.log;
	log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
		'\$status $body_bytes_sent "\$http_referer" '
		'"\$http_user_agent" "\$http_x_forwarded_for"';
	sendfile on;
	gzip on;
	gzip_proxied any;
	gzip_types *;
	gzip_comp_level 9;
	include /etc/nginx/conf.d/*.conf;
	client_max_body_size 10G;
}
EOF
else
whiptail --title "错误信息" --msgbox "Nginx已经安装" 8 78 
clear
#exit 1
fi
}

#申请证书
installacme(){

  set +e
	curl -s https://get.acme.sh | sh
	if [[ $? != 0 ]]; then
		whiptail --title "错误信息" --msgbox "安装证书失败" 8 78 
        clear
		exit 1
	fi
	~/.acme.sh/acme.sh --upgrade --auto-upgrade
}

#申请证书
issuecert(){

    set +e
	clear
	if [[ -f /etc/trojan/trojan.crt ]] && [[ -f /etc/trojan/trojan.key ]] && [[ -n /etc/trojan/trojan.crt ]]; then
		TERM=ansi whiptail --title "证书已存在，跳过申请" --infobox "证书已存在，跳过申请..." 8 78
		else
	rm -rf /etc/nginx/sites-available/* &
	rm -rf /etc/nginx/sites-enabled/* &
	rm -rf /etc/nginx/conf.d/*
	touch /etc/nginx/conf.d/default.conf
cat > '/etc/nginx/conf.d/default.conf' << EOF
server {
	listen       80;
	listen       [::]:80;
	server_name  $domain;
	root   /usr/share/nginx/html;
}
EOF
	nginx -t
	systemctl start nginx > /dev/null 2>&1
	installacme
	#clear
	~/.acme.sh/acme.sh --issue --nginx -d $domain -k ec-256 --force --test --log --reloadcmd "systemctl reload trojan || true && nginx -s reload"
	if [[ $? != 0 ]]; then
	whiptail --title "错误信息" --msgbox "证书申请测试失败，请检查VPS控制面板防火墙(80 443)是否打开" 8 78
    #clear
	exit 1
	fi 
	#clear
	~/.acme.sh/acme.sh --issue --nginx -d $domain -k ec-256 --force --log --reloadcmd "systemctl reload trojan || true && nginx -s reload"
	if [[ $? != 0 ]]; then
	whiptail --title "错误信息" --msgbox "证书申请失败，请检查VPS控制面板防火墙(80 443)是否打开" 8 78
    #clear
	exit 1
	fi
	~/.acme.sh/acme.sh --installcert -d $domain --fullchainpath /etc/trojan/trojan.crt --keypath /etc/trojan/trojan.key --ecc
	chmod +r /etc/trojan/trojan.key
	fi

}

#在nginx配置trojan
nginxtrojan(){

set +e
clear
rm -rf /etc/nginx/sites-available/*
rm -rf /etc/nginx/sites-enabled/*
rm -rf /etc/nginx/conf.d/*
touch /etc/nginx/conf.d/trojan.conf

cat > '/etc/nginx/conf.d/trojan.conf' << EOF
#Do not change these settings unless you know what you are doing !
server {
	listen 127.0.0.1:80;
	server_name $domain;
	if (\$http_user_agent ~* (wget|curl) ) { return 444; }
	if (\$http_user_agent = "") { return 444; }
	if (\$host != "$domain") { return 404; }
	add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
	#add_header X-Frame-Options SAMEORIGIN always;
	#add_header X-Content-Type-Options "nosniff" always;
	#add_header Referrer-Policy "no-referrer";
	#add_header Content-Security-Policy "default-src 'self'; script-src 'self' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";
	#add_header Feature-Policy "geolocation none;midi none;notifications none;push none;sync-xhr none;microphone none;camera none;magnetometer none;gyroscope none;speaker self;vibrate none;fullscreen self;payment none;";
	location / {
		root /usr/share/nginx/html/;
			index index.html;
		}
EOF

echo "        location @errpage {" >> /etc/nginx/conf.d/trojan.conf
echo "        return 404;" >> /etc/nginx/conf.d/trojan.conf
echo "        }" >> /etc/nginx/conf.d/trojan.conf
echo "}" >> /etc/nginx/conf.d/trojan.conf
echo "" >> /etc/nginx/conf.d/trojan.conf
echo "server {" >> /etc/nginx/conf.d/trojan.conf
echo "    listen 80;" >> /etc/nginx/conf.d/trojan.conf
#echo "    listen [::]:80;" >> /etc/nginx/conf.d/trojan.conf
echo "    server_name $domain;" >> /etc/nginx/conf.d/trojan.conf
echo "    return 301 https://$domain\$request_uri;" >> /etc/nginx/conf.d/trojan.conf
echo "}" >> /etc/nginx/conf.d/trojan.conf
echo "" >> /etc/nginx/conf.d/trojan.conf
echo "server {" >> /etc/nginx/conf.d/trojan.conf
echo "    listen 80 default_server;" >> /etc/nginx/conf.d/trojan.conf
echo "    listen [::]:80 default_server;" >> /etc/nginx/conf.d/trojan.conf
echo "    server_name _;" >> /etc/nginx/conf.d/trojan.conf
echo "    return 404;" >> /etc/nginx/conf.d/trojan.conf
echo "}" >> /etc/nginx/conf.d/trojan.conf

nginx -t

wget https://raw.githubusercontent.com/pzwsquare/dt_server/master/html/web.zip
unzip -o web.zip -d /usr/share/nginx/html/
rm -rf web.zip
chown -R nginx:nginx /usr/share/nginx/


systemctl restart nginx > /dev/null 2>&1
systemctl restart trojan > /dev/null 2>&1

}

#替换证书
changepasswd(){

sudo ~/.acme.sh/acme.sh --installcert -d $domain --fullchainpath /etc/trojan/trojan.crt --keypath /etc/trojan/trojan.key --ecc
chmod +r /etc/trojan/trojan.key

  openssl dhparam -out /etc/trojan/trojan.pem 2048
  cat > '/usr/local/etc/trojan/config.json' << EOF
{
    "run_type": "server",
    "local_addr": "0.0.0.0",
    "local_port": 443,
    "remote_addr": "127.0.0.1",
    "remote_port": 80,
    "password": [
        "passwordd"
    ],
    "log_level": 1,
    "ssl": {
        "cert": "/etc/trojan/trojan.crt",
        "key": "/etc/trojan/trojan.key",
        "key_password": "",
        "cipher": "TLS_AES_128_GCM_SHA256",
	"cipher_tls13":"TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384",
        "prefer_server_cipher": true,
        "alpn": [
            "http/1.1"
        ],
        "reuse_session": true,
        "session_ticket": false,
        "session_timeout": 600,
        "plain_http_response": "",
        "curves": "",
        "dhparam": ""
    },
    "tcp": {
        "prefer_ipv4": true,
        "no_delay": true,
        "keep_alive": true,
        "reuse_port": false,
        "fast_open": true,
        "fast_open_qlen": 20
    },
    "mysql": {
        "enabled": false,
        "server_addr": "127.0.0.1",
        "server_port": 3306,
        "database": "trojan",
        "username": "trojan",
        "password": ""
    }
}
EOF
sed  -i "s/passwordd/$passwordd/g" /usr/local/etc/trojan/config.json

clear
timedatectl set-timezone Asia/Hong_Kong
timedatectl set-ntp on

}

#安装smartdns
install_sdns(){

wget --no-check-certificate -O ~/smartdns.deb $sd

dpkg -i ~/smartdns.deb

cat << EOF > /etc/smartdns/smartdns.conf
bind 127.0.0.1:53
bind :5533
cache-size 20480
#prefetch-domain yes
rr-ttl 86400
#rr-ttl-min 3600
#rr-ttl-max 604800
log-level info
log-file /var/log/smartdns.log
log-size 128k
log-num 2
force-AAAA-SOA yes
# default port is 853
server-tls 1.1.1.1
server-tls 8.8.8.8
# default port is 443
server-https https://cloudflare-dns.com/dns-query
EOF


# echo "" > /run/smartdns.pid
# cat << EOF > /lib/systemd/system/smartdns.service
# [Unit]
# Description=Smart DNS server
# After=network-online.target
# Before=nss-lookup.target
# Wants=network-online.target
# [Service]
# Type=forking
# PIDFile=/run/smartdns.pid
# EnvironmentFile=/etc/default/smartdns
# ExecStart=/usr/sbin/smartdns $SMART_DNS_OPTS
# KillMode=process
# Restart=always
# RestartSec=2s
# LimitNPROC=1000000
# LimitNOFILE=1000000
# [Install]
# WantedBy=multi-user.target
# EOF

rm -rf ~/smartdns.deb

echo "nameserver 127.0.0.1" > '/etc/resolv.conf'

systemctl enable smartdns > /dev/null 2>&1
systemctl start smartdns > /dev/null 2>&1

# systemctl daemon-reload > /dev/null 2>&1
# systemctl enable smartdns > /dev/null 2>&1
# systemctl restart smartdns > /dev/null 2>&1

}

#安装DNSMASQ
installDnsmasq(){

apt-get install dnsmasq -q -y > /dev/null

mv /etc/dnsmasq.conf /etc/dnsmasq.conf.bak
touch /etc/dnsmasq.conf
cat > '/etc/dnsmasq.conf' << EOF
port=53
domain-needed
bogus-priv
no-resolv
server=1.1.1.1#53
interface=lo
bind-interfaces
listen-address=127.0.0.1
cache-size=10000
no-negcache
log-queries 
log-facility=/var/log/dnsmasq.log 
EOF
echo "nameserver 127.0.0.1" > '/etc/resolv.conf'
systemctl restart dnsmasq
systemctl enable dnsmasq
}


#安装BBRplus内核
installbbrplus(){
    
	mkdir bbrplus
    cd bbrplus
	wget -N --no-check-certificate ${bbrplusFile}/linux-headers-${kernel_version}.deb
	wget -N --no-check-certificate ${bbrplusFile}/linux-image-${kernel_version}.deb

	dpkg -i linux-headers-${kernel_version}.deb
	dpkg -i linux-image-${kernel_version}.deb

	cd .. && rm -rf bbrplus
	detele_kernel
    #remove_all
	optimizing_system


}

#安装BBR内核
installbbr(){

cat > '/etc/sysctl.d/99-sysctl.conf' << EOF
net.ipv6.conf.all.accept_ra = 2
fs.file-max = 51200
net.core.rmem_max = 67108864
net.core.wmem_max = 67108864
net.core.rmem_default = 65536
net.core.wmem_default = 65536
net.core.netdev_max_backlog = 4096
net.core.somaxconn = 4096
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_time = 1200
net.ipv4.ip_local_port_range = 10000 65000
net.ipv4.tcp_max_tw_buckets = 5000
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_rmem = 4096 87380 67108864
net.ipv4.tcp_wmem = 4096 65536 67108864
net.ipv4.tcp_mtu_probing = 1
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_max_syn_backlog = 12800
net.core.default_qdisc=fq
net.ipv4.tcp_congestion_control=bbr
EOF

  sysctl -p > /dev/null

cat > '/etc/systemd/system.conf' << EOF
[Manager]
#DefaultTimeoutStartSec=90s
DefaultTimeoutStopSec=30s
#DefaultRestartSec=100ms
DefaultLimitCORE=infinity
DefaultLimitNOFILE=51200
DefaultLimitNPROC=51200
EOF

cat > '/etc/security/limits.conf' << EOF
* soft nofile 51200
* hard nofile 51200
EOF

if grep -q "ulimit" /etc/profile
then
  :
else
echo "ulimit -SHn 51200" >> /etc/profile
fi

systemctl daemon-reload

}

#卸载全部加速
remove_all(){
	rm -rf bbrmod
	sed -i '/net.core.default_qdisc/d' /etc/sysctl.conf
    sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
    sed -i '/fs.file-max/d' /etc/sysctl.conf
	sed -i '/net.core.rmem_max/d' /etc/sysctl.conf
	sed -i '/net.core.wmem_max/d' /etc/sysctl.conf
	sed -i '/net.core.rmem_default/d' /etc/sysctl.conf
	sed -i '/net.core.wmem_default/d' /etc/sysctl.conf
	sed -i '/net.core.netdev_max_backlog/d' /etc/sysctl.conf
	sed -i '/net.core.somaxconn/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_syncookies/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_tw_reuse/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_tw_recycle/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_fin_timeout/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_keepalive_time/d' /etc/sysctl.conf
	sed -i '/net.ipv4.ip_local_port_range/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_max_syn_backlog/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_max_tw_buckets/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_rmem/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_wmem/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_mtu_probing/d' /etc/sysctl.conf
	sed -i '/net.ipv4.ip_forward/d' /etc/sysctl.conf
	sed -i '/fs.inotify.max_user_instances/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_syncookies/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_fin_timeout/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_tw_reuse/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_max_syn_backlog/d' /etc/sysctl.conf
	sed -i '/net.ipv4.ip_local_port_range/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_max_tw_buckets/d' /etc/sysctl.conf
	sed -i '/net.ipv4.route.gc_timeout/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_synack_retries/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_syn_retries/d' /etc/sysctl.conf
	sed -i '/net.core.somaxconn/d' /etc/sysctl.conf
	sed -i '/net.core.netdev_max_backlog/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_timestamps/d' /etc/sysctl.conf
	sed -i '/net.ipv4.tcp_max_orphans/d' /etc/sysctl.conf
	#clear
	sleep 1s
}

#优化系统配置
optimizing_system(){
    
echo "fs.file-max = 1000000
fs.inotify.max_user_instances = 8192
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_tw_reuse = 1
net.ipv4.ip_local_port_range = 1024 65000
net.ipv4.tcp_max_syn_backlog = 16384
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.route.gc_timeout = 100
net.ipv4.tcp_syn_retries = 1
net.ipv4.tcp_synack_retries = 1
net.core.somaxconn = 32768
net.core.netdev_max_backlog = 32768
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_max_orphans = 32768
# forward ipv4
net.ipv4.ip_forward = 1
net.core.default_qdisc=fq
net.ipv4.tcp_congestion_control=bbrplus">>/etc/sysctl.conf
sysctl -p
/usr/sbin/update-grub
}


#删除多余内核
detele_kernel(){
    deb_total=`dpkg -l | grep linux-image | awk '{print $2}' | grep -v "${kernel_version}" | wc -l`
    if [ "${deb_total}" > "1" ]; then
        for((integer = 1; integer <= ${deb_total}; integer++)); do
            deb_del=`dpkg -l|grep linux-image | awk '{print $2}' | grep -v "${kernel_version}" | head -${integer}`
            echo -e "开始卸载 ${deb_del} 内核..."
            apt-get purge -y ${deb_del}
        done
    else
        clear
        whiptail --title "错误信息" --msgbox "检测到内核数量不正确" 8 78 
	    exit 1
    fi
}

function dd_instl(){
    bash <(wget --no-check-certificate -qO- https://git.io/JvPUW) -d 10 -v 64 -p 'dengta' -a
}
function tg_pxy(){
    bash <(wget --no-check-certificate -qO- https://git.io/JvPUC)
}

toolsMenu() {

    Mainmenu=$(whiptail --clear --ok-button "确定" --backtitle "version:20200330v1" --title "灯塔服务端v2.1" --menu --nocancel "
**********************************************************************************
简介：灯塔服务端v2.1
系统：>=debian9
Youtube：米月
电报群：https://t.me/mi_yue
Youtube频道地址：https://t.im/n21o
**********************************************************************************
请选择需要安装的内容，VPS端务必打开80 443端口，不要套用任何CDN加速

    " 22 86 5\
        "1" " 安装灯塔极速版（兼容小部分VPS）"\
        "2" " 安装灯塔大众版（兼容大部分VPS）"\
        "3" " 安装tg代理（默认端口：9443）"\
        "4" " 安装debian10（登录密码：dengta）"\
        "5" " 退出" 3>&1 1>&2 2>&3)
    case $Mainmenu in
        1)
        osdist
        userinput
        installDependency
        installnginx
        installtrojan
        openfirewall
        issuecert
        nginxtrojan
        installbbrplus
        install_sdns
        whiptail --title "灯塔服务端安装成功" --msgbox "
*************************************************************************
灯塔急速版已安装完成，复制以下信息，在OpenWrt里进行配置
服务器地址：$domain
服务器端口：443
服务器密码：$passwordd
密码修改文件：/usr/local/etc/trojan/config.json
*************************************************************************" 16 78
        clear
        ;;
        2)
        userinput
        installDependency
        installnginx
        installtrojan
        openfirewall
        issuecert
        nginxtrojan
        installbbr
        installDnsmasq
        whiptail --title "灯塔服务端安装成功" --msgbox "
*************************************************************************
灯塔大众版已安装完成，复制以下信息，在OpenWrt里进行配置
服务器地址：$domain
服务器端口：443
服务器密码：$passwordd
密码修改文件：/usr/local/etc/trojan/config.json
*************************************************************************" 16 78
        ;;
        3)
        tg_pxy
        ;;
        4)
        dd_instl
        ;;
        5)
        #exit
        clear
        whiptail --title "脚本已退出" --msgbox "真希望把你留住" 8 78
        ;;
        esac
}

# osdist

cipher_server="ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384"
#cipher_client="ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:AES128-SHA:AES256-SHA:DES-CBC3-SHA"

sd="https://github.com/pymumu/smartdns/releases/download/Release30/smartdns.1.2020.02.25-2212.x86_64-debian-all.deb"

bbrplusFile="https://raw.githubusercontent.com/pzwsquare/dt_server/master/bbrplus"

kernel_version="4.14.129-bbrplus"

toolsMenu
